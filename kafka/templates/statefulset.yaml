apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "kafka.fullname" . }}
  labels:
    {{- include "kafka.labels" . | nindent 4 }}
spec:
  podManagementPolicy: Parallel
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      {{- include "kafka.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "kafka.fullname" . }}-headless
  template:
    metadata:
      labels:
        {{- include "kafka.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name | default (include "kafka.fullname" .) }}
      initContainers:
        - name: format-kafka-data
          image: busybox:1.37.0
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - sh
            - -c
            - |
              echo "Formatting volume at /var/lib/kafka/data..."
              rm -rf /var/lib/kafka/data/lost+found
          volumeMounts:
            - name: data
              mountPath: /var/lib/kafka/data
      containers:
        - name: kafka
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - sh
            - -exc
            - |
              export KAFKA_NODE_ID=${HOSTNAME##*-} && \
              export KAFKA_ADVERTISED_LISTENERS={{ .Values.kafkaConfig.KAFKA_ADVERTISED_LISTENERS }}

              exec /etc/confluent/docker/run
          env:
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: {{ .Values.kafkaConfig.KAFKA_INTER_BROKER_LISTENER_NAME | quote}}
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: {{ .Values.kafkaConfig.KAFKA_LISTENER_SECURITY_PROTOCOL_MAP | quote}}
            - name: CLUSTER_ID
              value: {{ .Values.kafkaConfig.CLUSTER_ID | quote}}
            - name: KAFKA_CONTROLLER_QUORUM_VOTERS
              value: {{ .Values.kafkaConfig.KAFKA_CONTROLLER_QUORUM_VOTERS | quote}}
            - name: KAFKA_PROCESS_ROLES
              value: {{ .Values.kafkaConfig.KAFKA_PROCESS_ROLES }}
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: {{ .Values.kafkaConfig.KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR | quote}}
            - name: KAFKA_NUM_PARTITIONS
              value: {{ .Values.kafkaConfig.KAFKA_NUM_PARTITIONS | quote}}
            - name: KAFKA_DEFAULT_REPLICATION_FACTOR
              value: {{ .Values.kafkaConfig.KAFKA_DEFAULT_REPLICATION_FACTOR | quote}}
            - name: KAFKA_MIN_INSYNC_REPLICAS
              value: {{ .Values.kafkaConfig.KAFKA_MIN_INSYNC_REPLICAS | quote}}
            - name: KAFKA_CONTROLLER_LISTENER_NAMES
              value: {{ .Values.kafkaConfig.KAFKA_CONTROLLER_LISTENER_NAMES | quote}}
            - name: KAFKA_LISTENERS
              value: {{ .Values.kafkaConfig.KAFKA_LISTENERS | quote}}
            - name: KAFKA_LOG4J_LOGGERS
              value: {{ .Values.kafkaConfig.KAFKA_LOG4J_LOGGERS | quote}}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 60
            periodSeconds: 60
            successThreshold: 1
            tcpSocket:
              port: tcp-kafka-int
            timeoutSeconds: 5
          ports:
            - containerPort: {{ .Values.service.port }}
              name: tcp-kafka-int
              protocol: TCP
            - containerPort: {{ .Values.service.controllerPort }}
              name: tcp-kafka-ctrl
              protocol: TCP
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/kafka
              name: config
            - mountPath: /var/lib/kafka/data
              name: data
            - mountPath: /var/log
              name: logs
      dnsPolicy: {{ .Values.pod.dnsPolicy }}
      restartPolicy: {{ .Values.pod.restartPolicy }}
      schedulerName: {{ .Values.pod.schedulerName }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      terminationGracePeriodSeconds: {{ .Values.pod.terminationGracePeriodSeconds }}
      volumes:
        - emptyDir: {}
          name: config
        - emptyDir: {}
          name: logs
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
      spec:
        accessModes:
          {{- toYaml .Values.persistence.accessModes | nindent 10 }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        volumeMode: Filesystem 